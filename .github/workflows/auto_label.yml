name: Configure Issue on Open

on:
  issues:
    types: [opened]

jobs: 
  assign_issue_parameters: 
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Checkout code.
        uses: actions/checkout@v4
        with: 
          sparse-checkout: .github

      - name: Access Issue Body as JSON
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser

      - name: Debug Issue Body JSON
        run: cat ${HOME}/issue-parser-result.json

      - name: Setup Global Variables
        env:
          SCRIPT_PATH: './.github/scripts'
        run: |
          echo 'SCRIPT_PATH='${SCRIPT_PATH} >> $GITHUB_ENV

      - name: Assign Issue Variables to Environment
        run: |
          echo "PRIORITY=${{steps.issue-parser.outputs.issueparser_priority }}" >> $GITHUB_ENV
          echo "SIZE=${{steps.issue-parser.outputs.issueparser_size }}" >> $GITHUB_ENV
          echo "DEPARTMENT=${{steps.issue-parser.outputs.issueparser_department }}" >> $GITHUB_ENV
      - name: Get Project Data.
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT_TOKEN }}
          SCRIPT_PATH: './.github/scripts'
        run: |
          source ${SCRIPT_PATH}/projectWorkflow.sh

          runGraphQLQuery 'getProjectInfo' 'project_data.json'
          cat project_data.json
          
          # Get project id in PROJECT_ID
          getProjectID
          
          # Get ID of Priority Field and Priority Option
          getProjectVariableID 'PRIORITY_ID' 'Priority'
          getProjectFieldOptionID 'PRIORITY_OPTION_ID' 'Priority' "${PRIORITY}"

          # Get ID of Size Field and Size Option
          getProjectVariableID 'SIZE_ID' 'Size'
          getProjectFieldOptionID 'SIZE_OPTION_ID' 'Size' "${SIZE}"

          # Get ID of Department Field and Department Option
          getProjectVariableID 'DEPARTMENT_ID' 'Department'
          getProjectFieldOptionID 'DEPARTMENT_OPTION_ID' 'Department' "${DEPARTMENT}"

      - name: Add issue to project.
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT_TOKEN }}
          ITEM_ID: ${{ github.event.issue.node_id }}
        run: |
          source ${SCRIPT_PATH}/projectWorkflow.sh
          
          runGraphQLMutation 'addIssueToProject' test_data.json "$PROJECT_ID" "$ITEM_ID"
          cat test_data.json
          getProjectItemID test_data.json 'PROJECT_ITEM_ID'
          echo $PROJECT_ITEM_ID

      - name: Mutate issue
        env:
          GH_TOKEN: ${{ secrets.PROJECT_PAT_TOKEN }}
        run: |
          source ${SCRIPT_PATH}/projectWorkflow.sh

          LC_ALL=C

          if[ "${PRIORITY}" != "None" ]
          then
            runGraphQLMutation 'setProjectItemPriority' set_priority.json \
              "$PROJECT_ID" \
              "$PROJECT_ITEM_ID" \
              "$PRIORITY_ID" \
              "${{env.PRIORITY_OPTION_ID}}"
          fi

          if[ "${SIZE}" != "None" ]
          then
            runGraphQLMutation 'setProjectItemSize' set_size.json \
              "$PROJECT_ID" \
              "$PROJECT_ITEM_ID" \
              "$SIZE_ID" \
              "${{env.SIZE_OPTION_ID}}"
          fi

          if[ "${DEPARTMENT}" != "None" ]
          then 
            runGraphQLMutation 'setProjectItemDepartment' set_department.json \
              "$PROJECT_ID" \
              "$PROJECT_ITEM_ID" \
              "$DEPARTMENT_ID" \
              "${{env.DEPARTMENT_OPTION_ID}}"
          fi
  auto_label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Assign labels from titles.
        run: |
          ISSUE_TITLE="${{ github.event.issue.title }}"
          LABELS=""
          case "$ISSUE_TITLE" in 
            *Components*)
              echo "Adding React and Javascript labels to issue."
              LABELS="React,Javascript"
              ;;
            *DevOps* | *"Dev Ops"*)
              echo "Adding Dev Ops label to issue."
              LABELS="Dev Ops"
              ;;
            *Documentation*)
              echo "Adding Documentation label to issue." 
              LABELS="Documentation"
              ;;
            esac

            echo "LABELS=$LABELS" >> $GITHUB_ENV
      - name: Apply label to issue.
        if: env.LABELS != ''
        run: gh issue edit "$NUMBER" --add-label "$LABELS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          NUMBER: ${{ github.event.issue.number }}
          LABELS: ${{ env.LABELS }}

         
